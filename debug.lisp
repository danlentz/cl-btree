(in-package :b-tree-impl)

(defun make-b-tree-block-formatter ()
  (let ((count 0)
        (byte-count 0)
        (state nil))
    (lambda (data)
      (labels
          ((format-b-tree-ref-position (data)
             (swap-file:format-octet (car data))
             (incf byte-count)
             (when (>= byte-count 4)
                (swap-file:format-comment "file position")
                (setq byte-count 0)
                (setq state nil)))
           (format-b-tree-value (data)
             (swap-file:format-octet (car data))
             (incf byte-count)
             (when (>= byte-count 4)
                (swap-file:format-comment "value")
                (setq byte-count 0)
                (setq state nil)))
           (format-b-tree-key (data)
             (swap-file:format-octet (car data))
             (incf byte-count)
             (when (>= byte-count 4)
                (swap-file:format-comment "key")
                (setq byte-count 0)
                (setq state #'format-b-tree-value)))
           (begin-block (data)
             (cond
               ((= (car data) +b-tree-ref+)
                (swap-file:format-octet (car data))
                (swap-file:format-comment "+b-tree-ref+")
                (setq state #'format-b-tree-ref-position))
               ((= (car data) +b-tree-item+)
                (swap-file:format-octet (car data))
                (swap-file:format-comment "+b-tree-item+")
                (setq state #'format-b-tree-key))
               ((= (car data) +b-tree-eof+)
                (swap-file:format-octet (car data))
                (swap-file:format-comment "+b-tree-eof+")
                (setq count 0)
                (setq state :eof))
               (t (error "Unknown node type."))))
           (format-data (remaining-data)
             (cond
               ((eql state :eof)
                (setq state nil))
               (remaining-data
                (if state
                    (funcall state remaining-data)
                    (begin-block remaining-data))
                (incf count)
                (format-data (cdr remaining-data)))
               (t
                (swap-file:format-comment "(cont. next block)")))))
        (format-data data)))))

(defun format-b-tree-blocks (btree)
  (swap-file:format-swap-file (b-tree-swap-file btree) (make-b-tree-block-formatter)))
