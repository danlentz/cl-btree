(in-package :common-lisp-user)

(defpackage b-tree-api-tests
  (:use :cl :lisp-unit))

(in-package :b-tree-api-tests)

(define-test basics
  (when (probe-file "/tmp/b-tree-test.db")
    (delete-file "/tmp/b-tree-test.db"))
  (when (probe-file "/tmp/b-tree-test.wal")
    (delete-file "/tmp/b-tree-test.wal"))
  (let ((btree (b-tree:open "/tmp/b-tree-test.db" :block-size 64 :if-exists :append)))
    (assert-typep 'b-tree-impl:b-tree btree)
    (b-tree:insert btree 1 100)
    (assert-eql 100 (b-tree:search btree 1))
    (assert-equalp '(100 1) (multiple-value-list (b-tree:min btree)))
    (assert-equalp '(100 1) (multiple-value-list (b-tree:max btree)))
    (assert-equalp '((1 100)) (b-tree:map 'list btree #'(lambda (k v) (list k v))))
    (b-tree:delete btree 1)
    (assert-false (b-tree:search btree 1))
    (assert-false (b-tree:min btree))
    (assert-false (b-tree:max btree))
    (assert-false (b-tree:map 'list btree #'identity))
    (b-tree:close btree))
  (let ((btree (b-tree:open "/tmp/b-tree-test.db" :block-size 64 :if-exists :append)))
    (b-tree:insert btree 2 200)
    (assert-eql 200 (b-tree:search btree 2))
    (b-tree:close btree))
  (let ((btree (b-tree:open "/tmp/b-tree-test.db" :block-size 64 :if-exists :append)))
    (assert-eql 200 (b-tree:search btree 2))
    (b-tree:close btree)))

(define-test string-b-tree-basics
  (when (probe-file "/tmp/b-tree-test.db")
    (delete-file "/tmp/b-tree-test.db"))
  (when (probe-file "/tmp/b-tree-test.wal")
    (delete-file "/tmp/b-tree-test.wal"))
  (let ((btree (b-tree:open "/tmp/b-tree-test.db" :type :string :block-size 64 :if-exists :append)))
    (assert-typep 'b-tree-impl:b-tree btree)
    (b-tree:insert btree 'my-key "This is a test value.")
    (assert-equal "This is a test value." (b-tree:search btree 'my-key))
    (b-tree:close btree))
  (let ((btree (b-tree:open "/tmp/b-tree-test.db" :type :string :block-size 64 :if-exists :append)))
    (assert-equal "This is a test value." (b-tree:search btree 'my-key))
    (b-tree:close btree)))